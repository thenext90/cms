---
import Layout from '../layouts/Layout.astro';
import { Calendar, ArrowLeft } from 'lucide-astro';
import noticiasData from '../data/cms1.json';

// Función para extraer fecha del texto
function extraerFecha(texto) {
  // Lista de meses en español e inglés
  const mesesMap = {
    'enero': 'Enero', 'january': 'Enero',
    'febrero': 'Febrero', 'february': 'Febrero',
    'marzo': 'Marzo', 'march': 'Marzo',
    'abril': 'Abril', 'april': 'Abril',
    'mayo': 'Mayo', 'may': 'Mayo',
    'junio': 'Junio', 'june': 'Junio',
    'julio': 'Julio', 'july': 'Julio',
    'agosto': 'Agosto', 'august': 'Agosto',
    'septiembre': 'Septiembre', 'september': 'Septiembre',
    'octubre': 'Octubre', 'october': 'Octubre',
    'noviembre': 'Noviembre', 'november': 'Noviembre',
    'diciembre': 'Diciembre', 'december': 'Diciembre',
    'dic': 'Diciembre', 'dec': 'Diciembre',
    'sept': 'Septiembre', 'sep': 'Septiembre'
  };

  const textoLower = texto.toLowerCase();
  
  // Buscar mes específico en el texto
  for (const [mesKey, mesNombre] of Object.entries(mesesMap)) {
    if (textoLower.includes(mesKey)) {
      // Buscar también el año si está presente
      const regex = new RegExp(`${mesKey}\\s*(\\d{4})`, 'i');
      const match = textoLower.match(regex);
      if (match && match[1]) {
        return `${mesNombre} ${match[1]}`;
      }
      
      // Si no encuentra año específico, usar año por defecto basado en el contexto
      // Determinar año basado en otros patrones
      if (textoLower.includes('2025')) return `${mesNombre} 2025`;
      if (textoLower.includes('2024')) return `${mesNombre} 2024`;
      if (textoLower.includes('2023')) return `${mesNombre} 2023`;
      if (textoLower.includes('2022')) return `${mesNombre} 2022`;
      
      // Por defecto, usar año actual para meses encontrados
      return `${mesNombre} 2024`;
    }
  }
  
  // Buscar patrones de año específicos para asignar fechas contextuales
  if (textoLower.includes('2025')) {
    return 'Enero 2025'; // Proyectos futuros se asignan a Enero
  }
  if (textoLower.includes('2024')) {
    return 'Diciembre 2024'; // Proyectos de 2024 se asignan a Diciembre
  }
  if (textoLower.includes('2023')) {
    return 'Diciembre 2023';
  }
  if (textoLower.includes('2022')) {
    return 'Diciembre 2022';
  }
  
  // Buscar patrones de rango de años como "2024-2025"
  const rangoPattern = /(\d{4})-(\d{4})/;
  const rangoMatch = texto.match(rangoPattern);
  if (rangoMatch) {
    return `Enero ${rangoMatch[2]}`; // Usar el segundo año del rango
  }
  
  // Para noticias específicas conocidas
  if (textoLower.includes('econativa')) {
    return 'Julio 2025'; // Fecha específica para Econativa
  }
  
  // Para noticias sin fecha específica, asignar fecha basada en contexto de contenido
  if (textoLower.includes('certificación') || textoLower.includes('certificacion')) {
    return 'Noviembre 2024'; // Certificaciones recientes
  }
  if (textoLower.includes('capacitación') || textoLower.includes('capacitacion')) {
    return 'Octubre 2024'; // Capacitaciones recientes
  }
  if (textoLower.includes('iso') && textoLower.includes('proceso')) {
    return 'Septiembre 2024'; // Procesos ISO en curso
  }
  
  // Si no encuentra nada específico, usar fecha actual
  const ahora = new Date();
  const meses = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];
  return `${meses[ahora.getMonth()]} ${ahora.getFullYear()}`;
}

// Función para inferir categoría del texto
function inferirCategoria(texto) {
  const textoLower = texto.toLowerCase();
  
  // Verificar primero si contiene certificación
  if (textoLower.includes('certificación') || textoLower.includes('certificacion')) {
    return 'Actualizaciones y mejoras para quienes confían en nosotros';
  }
  if (textoLower.includes('capacitación') || textoLower.includes('capacitacion')) {
    return 'Capacitación';
  }
  if (textoLower.includes('haccp') || textoLower.includes('iso 22000')) {
    return 'Seguridad Alimentaria';
  }
  if (textoLower.includes('iso 27001') || textoLower.includes('ciberseguridad')) {
    return 'Seguridad IT';
  }
  if (textoLower.includes('iso 45001') || textoLower.includes('seguridad')) {
    return 'Seguridad Laboral';
  }
  if (textoLower.includes('iso 14001') || textoLower.includes('ambiental')) {
    return 'Gestión Ambiental';
  }
  if (textoLower.includes('auditoria')) {
    return 'Auditoría';
  }
  
  // Categoría por defecto actualizada
  return 'Actualizaciones y mejoras para quienes confían en nosotros';
}

// Función para extraer solo el año de una fecha
function extraerAno(fechaTexto) {
  const match = fechaTexto.match(/(\d{4})/);
  return match ? parseInt(match[1]) : new Date().getFullYear();
}

// Función para agrupar noticias por año
function agruparPorAno(noticias) {
  const grupos = {};
  
  noticias.forEach(noticia => {
    const fecha = extraerFecha(noticia.text);
    const ano = extraerAno(fecha);
    
    if (!grupos[ano]) {
      grupos[ano] = [];
    }
    grupos[ano].push(noticia);
  });
  
  // Ordenar años de mayor a menor (más reciente primero: 2025 → 2024 → 2023...)
  const anosOrdenados = Object.keys(grupos).sort((a, b) => parseInt(b) - parseInt(a));
  
  return anosOrdenados.map(ano => ({
    ano: parseInt(ano),
    noticias: grupos[ano].sort((a, b) => {
      // Dentro de cada año, ordenar por mes (más reciente primero)
      const fechaA = extraerFecha(a.text);
      const fechaB = extraerFecha(b.text);
      const mesesMap = {
        'enero': 1, 'febrero': 2, 'marzo': 3, 'abril': 4, 'mayo': 5, 'junio': 6,
        'julio': 7, 'agosto': 8, 'septiembre': 9, 'octubre': 10, 'noviembre': 11, 'diciembre': 12
      };
      
      const mesA = mesesMap[fechaA.split(' ')[0].toLowerCase()] || 12;
      const mesB = mesesMap[fechaB.split(' ')[0].toLowerCase()] || 12;
      
      return mesB - mesA; // Meses más recientes primero
    })
  }));
}

function crearTitulo(texto) {
  let titulo = texto.replace(/\n/g, ' ').substring(0, 80);
  if (titulo.length === 80) {
    const ultimoEspacio = titulo.lastIndexOf(' ');
    if (ultimoEspacio > 50) {
      titulo = titulo.substring(0, ultimoEspacio) + '...';
    }
  }
  return titulo.charAt(0).toUpperCase() + titulo.slice(1);
}
---

<Layout title="Noticias - CMS Consultores">
  <main class="bg-gray-50">
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-accent-900 via-accent-800 to-accent-700 text-white py-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <Calendar size="64" class="mx-auto mb-6 text-orange-200" />
          <h1 class="text-4xl md:text-5xl font-bold mb-4">Trayectoria con Nuestros Clientes</h1>
          <p class="text-xl text-orange-100 max-w-3xl mx-auto">
            Décadas de experiencia documentando el crecimiento y éxito de nuestros clientes en sus procesos de certificación y mejora continua
          </p>
        </div>
      </div>
    </section>

    <!-- Lista de Noticias -->
    <section class="py-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="mb-8">
          <a href="/" class="inline-flex items-center space-x-2 text-accent-800 hover:text-accent-900 font-medium transition-colors">
            <ArrowLeft size="20" />
            <span>Volver al inicio</span>
          </a>
        </div>

        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {agruparPorAno(
            noticiasData
              .filter(noticia => noticia.text && noticia.text.trim() !== '')
              .slice(0, 30)
          ).map(grupo => (
            <div class="md:col-span-2 lg:col-span-3 mb-12">
              <!-- Título del año -->
              <div class="border-b-2 border-accent-200 pb-4 mb-8">
                <h2 class="text-3xl font-bold text-accent-800">{grupo.ano}</h2>
                <p class="text-gray-600 mt-2">{grupo.noticias.length} {grupo.noticias.length === 1 ? 'proyecto' : 'proyectos'} realizados</p>
              </div>
              
              <!-- Grid de noticias para este año -->
              <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                {grupo.noticias.map((noticia, index) => (
                  <article class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
                    <div class="relative">
                      <img 
                        src={noticia.image_url} 
                        alt={crearTitulo(noticia.text)}
                        class="w-full h-48 object-cover"
                      />
                      <div class="absolute top-4 left-4">
                        <span class="bg-gradient-to-r from-accent-600 to-accent-800 text-white text-xs font-semibold px-3 py-2 rounded-full">
                          {inferirCategoria(noticia.text)}
                        </span>
                      </div>
                    </div>
                    
                    <div class="p-6">
                      <div class="flex items-center space-x-2 text-sm text-gray-500 mb-3">
                        <Calendar size="16" />
                        <time>{extraerFecha(noticia.text)}</time>
                      </div>
                      
                      <h3 class="text-xl font-bold text-gray-800 mb-3 leading-tight">
                        {crearTitulo(noticia.text)}
                      </h3>
                      
                      <p class="text-gray-600 text-sm leading-relaxed">
                        {noticia.text.replace(/\n/g, ' ').substring(0, 150) + (noticia.text.length > 150 ? '...' : '')}
                      </p>
                    </div>
                  </article>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>
</Layout>
