---
import { MessageCircle, X } from 'lucide-astro';
---

<!-- Widget flotante "Dejar un Mensaje" -->
<div id="message-widget" class="fixed right-3 bottom-3 sm:right-4 sm:bottom-4 z-50">
  <!-- Botón flotante -->
  <button id="message-button" type="button" class="bg-accent-800 hover:bg-accent-900 text-white p-3 sm:p-4 rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer group focus:outline-none focus:ring-2 focus:ring-accent-600">
    <MessageCircle size="20" class="sm:w-6 sm:h-6 group-hover:scale-110 transition-transform" />
  </button>
  
  <!-- Panel expandido - responsive width -->
  <div id="message-panel" class="hidden absolute right-0 bottom-full mb-3 sm:mb-4 w-72 sm:w-80 max-w-[90vw] sm:max-w-[85vw] bg-white rounded-xl shadow-2xl border border-gray-200 overflow-hidden">
    <!-- Header más compacto -->
    <div class="bg-gradient-to-r from-accent-800 to-accent-900 text-white p-2.5 sm:p-3 relative">
      <h3 class="font-bold text-sm sm:text-base flex items-center space-x-2">
        <MessageCircle size="16" class="sm:w-[18px] sm:h-[18px]" />
        <span>Déjanos un Mensaje</span>
      </h3>
      <button id="close-panel" type="button" class="absolute top-2.5 right-2.5 sm:top-3 sm:right-3 text-white hover:text-orange-200 transition-colors focus:outline-none">
        <X size="14" class="sm:w-4 sm:h-4" />
      </button>
    </div>
    
    <!-- Content más compacto en móvil -->
    <div class="p-4 sm:p-5">
      <form id="message-form" action="https://formspree.io/f/xnnzejer" method="POST" class="space-y-3 sm:space-y-4">
        <input type="hidden" name="_subject" value="Nuevo Mensaje desde Widget de Chat">
        <div>
          <label for="msg-name" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1.5 sm:mb-2">Nombre</label>
          <input type="text" id="msg-name" name="name" required class="w-full px-3 py-2 sm:py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-800 focus:border-transparent text-xs sm:text-sm">
        </div>
        
        <div>
          <label for="msg-email" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1.5 sm:mb-2">Email</label>
          <input type="email" id="msg-email" name="email" required class="w-full px-3 py-2 sm:py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-800 focus:border-transparent text-xs sm:text-sm">
        </div>
        
        <div>
          <label for="msg-message" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1.5 sm:mb-2">Mensaje</label>
          <textarea id="msg-message" name="message" rows="3" class="sm:rows-4" required class="w-full px-3 py-2 sm:py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-800 focus:border-transparent resize-none text-xs sm:text-sm"></textarea>
        </div>
        
        <button type="submit" class="w-full bg-accent-800 hover:bg-accent-900 text-white py-2.5 sm:py-3 px-4 rounded-lg transition-colors font-semibold text-xs sm:text-sm mt-4 sm:mt-6">
          Enviar Mensaje
        </button>
      </form>
    </div>
  </div>
</div>

<script>
(function() {
  'use strict';
  
  // Esperar a que el DOM esté completamente cargado
  function initWidget() {
    const messageButton = document.getElementById('message-button');
    const messagePanel = document.getElementById('message-panel');
    const closePanel = document.getElementById('close-panel');
    const messageForm = document.getElementById('message-form');

    console.log('Inicializando widget...', {
      messageButton: !!messageButton,
      messagePanel: !!messagePanel,
      closePanel: !!closePanel,
      messageForm: !!messageForm
    });

    if (!messageButton || !messagePanel) {
      console.error('Elementos del widget no encontrados');
      return;
    }

    // Función para mostrar/ocultar el panel
    function togglePanel() {
      console.log('Toggle panel clicked');
      if (!messagePanel || !messageButton) return;
      
      const isHidden = messagePanel.classList.contains('hidden');
      
      if (isHidden) {
        // Verificar el espacio disponible - formulario más alto sin scroll
        const rect = messageButton.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        
        messagePanel.classList.remove('hidden');
        console.log('Panel mostrado');
        
        // Scroll al top del panel si es necesario
        setTimeout(() => {
          if (messagePanel) {
            messagePanel.scrollTop = 0;
          }
        }, 50);
      } else {
        messagePanel.classList.add('hidden');
        console.log('Panel oculto');
      }
    }

    // Función para ocultar el panel
    function hidePanel() {
      console.log('Ocultando panel');
      if (messagePanel) {
        messagePanel.classList.add('hidden');
      }
    }

    // Event listeners
    messageButton.addEventListener('click', function(event) {
      event.preventDefault();
      event.stopPropagation();
      console.log('Botón clickeado');
      togglePanel();
    });

    if (closePanel) {
      closePanel.addEventListener('click', function(event) {
        event.preventDefault();
        event.stopPropagation();
        console.log('Botón cerrar clickeado');
        hidePanel();
      });
    }

    // Cerrar al hacer click fuera
    document.addEventListener('click', function(event) {
      const widget = document.getElementById('message-widget');
      const target = event.target as Node;
      if (widget && target && !widget.contains(target)) {
        hidePanel();
      }
    });

    // Manejar envío del formulario con AJAX
    if (messageForm) {
      messageForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const formData = new FormData(form);
        const plainObject = Object.fromEntries(formData.entries());
        const jsonString = JSON.stringify(plainObject);

        let status = document.querySelector('#message-form-status');
        if (!status) {
            status = document.createElement('div');
            status.id = 'message-form-status';
            form.prepend(status);
        }

        const submitButton = form.querySelector('button[type="submit"]');
        if (!submitButton) return;
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = 'Enviando...';

        try {
          const response = await fetch(form.action, {
            method: form.method,
            body: jsonString,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            status.innerHTML = `<p class="text-green-700 text-xs sm:text-sm mb-2">¡Gracias! Mensaje enviado.</p>`;
            form.reset();
            setTimeout(() => {
              hidePanel();
              // Clear status after hiding
              if (status) status.innerHTML = '';
            }, 2000); // Hide panel after 2 seconds
          } else {
            response.json().then(data => {
              const errorMessage = data && data.errors ? data.errors.map(e => e.message).join(', ') : 'Ocurrió un error.';
              status.innerHTML = `<p class="text-red-700 text-xs sm:text-sm mb-2">${errorMessage}</p>`;
            })
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          status.innerHTML = `<p class="text-red-700 text-xs sm:text-sm mb-2">Error: ${errorMessage}</p>`;
        } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
        }
      });
    }
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWidget);
  } else {
    initWidget();
  }
})();
</script>

<style>
  /* Asegurar que el widget esté por encima de otros elementos */
  #message-widget {
    z-index: 9999 !important;
  }
  
  /* Botón flotante */
  #message-button {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }
  
  #message-button:hover {
    transform: scale(1.05);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
  }
  
  /* Panel del formulario */
  #message-panel {
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    transform-origin: bottom right;
  }
  
  #message-panel.hidden {
    display: none !important;
    opacity: 0;
  }
  
  #message-panel:not(.hidden) {
    display: block !important;
    opacity: 1;
    animation: slideInUp 0.3s ease-out;
  }
  
  /* Animaciones - ahora desde abajo hacia arriba */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(10px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  /* Ajustes responsive mejorados */
  @media (min-width: 1024px) {
    #message-panel {
      width: 320px !important;
    }
  }
  
  @media (max-width: 768px) {
    #message-widget {
      right: 12px !important;
      bottom: 12px !important;
    }
    
    #message-panel {
      width: calc(100vw - 24px) !important;
      max-width: 300px !important;
      right: -8px !important;
    }
  }
  
  @media (max-width: 480px) {
    #message-widget {
      right: 8px !important;
      bottom: 8px !important;
    }
    
    #message-panel {
      width: calc(100vw - 16px) !important;
      max-width: 280px !important;
      right: -4px !important;
    }
    
    /* Botón más pequeño en móviles muy pequeños */
    #message-button {
      padding: 12px !important;
    }
  }
  
  /* Asegurar que los elementos sean clickeables */
  #message-button {
    pointer-events: all;
    user-select: none;
  }
  
  /* Estilos para el formulario */
  #message-form input:focus,
  #message-form textarea:focus {
    ring-offset-width: 2px;
  }
</style>
